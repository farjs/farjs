{
  // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
  "include": ["./**/*.mjs"],
  "exclude": ["./build/*", "./dist/farjs*", "./**/target/**/*js"],
  "compilerOptions": {
    "module": "node16",
    //got from here: https://stackoverflow.com/questions/67371787/what-typescript-configuration-produces-output-closest-to-node-js-16-capabilities/67371788#67371788
    "target": "ES2022",
    "lib": ["ES2022"],
    "allowJs": true,
    "checkJs": true,
    "importHelpers": true,
    // output .d.ts declaration files for consumers
    //"declaration": true,
    // output .js.map sourcemap files for consumers
    // "sourceMap": true,
    // match output dir to input dir. e.g. dist/index instead of dist/src/index
    // "rootDir": "./",
    // stricter type-checking for stronger correctness. Recommended by TS
    "strict": true,
    "useUnknownInCatchVariables": false,
    // linter checks for common issues
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    // noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    // use Node's module resolution algorithm, instead of the legacy TS one
    //"moduleResolution": "node",
    // transpile JSX to React.createElement
    // "jsx": "react",
    // interop between ESM and CJS modules. Recommended by TS
    "esModuleInterop": true,
    // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
    "skipLibCheck": true,
    // error out if import and file system have a casing mismatch. Recommended by TS
    "forceConsistentCasingInFileNames": true,
    "noEmit": true
    //"emitDeclarationOnly": true,
    //"outDir": "./types"
  }
}
